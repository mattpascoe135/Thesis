ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	switchFreq
  18              		.data
  19              		.align	2
  20              		.type	switchFreq, %object
  21              		.size	switchFreq, 4
  22              	switchFreq:
  23 0000 64000000 		.word	100
  24              		.global	power
  25              		.bss
  26              		.type	power, %object
  27              		.size	power, 1
  28              	power:
  29 0000 00       		.space	1
  30              		.global	status
  31              		.type	status, %object
  32              		.size	status, 1
  33              	status:
  34 0001 00       		.space	1
  35              		.global	calibrate
  36 0002 0000     		.align	2
  37              		.type	calibrate, %object
  38              		.size	calibrate, 4
  39              	calibrate:
  40 0004 00000000 		.space	4
  41              		.comm	head,4,4
  42              		.comm	curr,4,4
  43              		.global	mode
  44              		.type	mode, %object
  45              		.size	mode, 1
  46              	mode:
  47 0008 00       		.space	1
  48              		.section	.rodata
  49              		.align	2
  50              	.LC2:
  51 0000 0D0A00   		.ascii	"\015\012\000"
  52              		.global	__aeabi_idiv
  53 0003 00       		.align	2
  54              	.LC6:
  55 0004 0D0A3E20 		.ascii	"\015\012> \000"
  55      00
  56 0009 000000   		.align	2
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 2


  57              	.LC8:
  58 000c 3E2000   		.ascii	"> \000"
  59 000f 00       		.align	2
  60              	.LC10:
  61 0010 52657475 		.ascii	"Returning to main menu, press 'h' for help.\015\012"
  61      726E696E 
  61      6720746F 
  61      206D6169 
  61      6E206D65 
  62 003d 00       		.ascii	"\000"
  63 003e 0000     		.align	2
  64              	.LC12:
  65 0040 496E7661 		.ascii	"Invalid response, choose: y/n\015\012\000"
  65      6C696420 
  65      72657370 
  65      6F6E7365 
  65      2C206368 
  66              		.section	.text.rx_int,"ax",%progbits
  67              		.align	2
  68              		.global	rx_int
  69              		.code	16
  70              		.thumb_func
  71              		.type	rx_int, %function
  72              	rx_int:
  73              	.LFB34:
  74              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *
   3:.\main.c      ****  * Copyright YOUR COMPANY, THE YEAR
   4:.\main.c      ****  * All Rights Reserved
   5:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:.\main.c      ****  *
   7:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:.\main.c      ****  * WHICH IS THE PROPERTY OF your company.
   9:.\main.c      ****  *
  10:.\main.c      ****  * ========================================
  11:.\main.c      **** */
  12:.\main.c      **** #include <project.h>
  13:.\main.c      **** #include <cli.h>
  14:.\main.c      **** #include <stdio.h>
  15:.\main.c      **** #include <stdlib.h>
  16:.\main.c      **** #include <stdbool.h>
  17:.\main.c      **** #include <main.h>
  18:.\main.c      **** 
  19:.\main.c      **** int switchFreq          =   100;            // Set default switch speed to 10KHz (1/10000)=0.0001s=
  20:.\main.c      **** bool power              =   false;          // When device turns on, set power to off
  21:.\main.c      **** int calibrate           =   0;
  22:.\main.c      **** 
  23:.\main.c      **** typedef struct node {       //node for switch
  24:.\main.c      ****     uint16 number;
  25:.\main.c      ****     struct node *next;
  26:.\main.c      ****     struct node *prev;
  27:.\main.c      **** } node_t;
  28:.\main.c      **** node_t *head;
  29:.\main.c      **** node_t *curr;
  30:.\main.c      **** 
  31:.\main.c      **** //Setup states for CLI
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 3


  32:.\main.c      **** status_t status=HOME;
  33:.\main.c      **** currMode_t mode=MODEA;
  34:.\main.c      **** 
  35:.\main.c      **** 
  36:.\main.c      **** 
  37:.\main.c      **** CY_ISR(rx_int) {    
  75              		.loc 1 37 0
  76              		.cfi_startproc
  77 0000 90B5     		push	{r4, r7, lr}
  78              		.cfi_def_cfa_offset 12
  79              		.cfi_offset 4, -12
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 83B0     		sub	sp, sp, #12
  83              		.cfi_def_cfa_offset 24
  84 0004 00AF     		add	r7, sp, #0
  85              		.cfi_def_cfa_register 7
  38:.\main.c      ****     static int freq=0;
  39:.\main.c      ****     char data;
  40:.\main.c      ****     
  41:.\main.c      ****     data = UART_GetChar();        
  86              		.loc 1 41 0
  87 0006 FC1D     		add	r4, r7, #7
  88 0008 FFF7FEFF 		bl	UART_GetChar
  89 000c 031C     		mov	r3, r0
  90 000e 2370     		strb	r3, [r4]
  42:.\main.c      ****     UART_WriteTxData(data);
  91              		.loc 1 42 0
  92 0010 FB1D     		add	r3, r7, #7
  93 0012 1B78     		ldrb	r3, [r3]
  94 0014 181C     		mov	r0, r3
  95 0016 FFF7FEFF 		bl	UART_WriteTxData
  43:.\main.c      ****             
  44:.\main.c      ****     switch(status) {
  96              		.loc 1 44 0
  97 001a 524B     		ldr	r3, .L19
  98 001c 1B78     		ldrb	r3, [r3]
  99 001e 042B     		cmp	r3, #4
 100 0020 00D9     		bls	.LCB24
 101 0022 9CE0     		b	.L1	@long jump
 102              	.LCB24:
 103 0024 9A00     		lsl	r2, r3, #2
 104 0026 504B     		ldr	r3, .L19+4
 105 0028 D318     		add	r3, r2, r3
 106 002a 1B68     		ldr	r3, [r3]
 107 002c 9F46     		mov	pc, r3
 108              		.section	.rodata
 109              		.align	2
 110              	.L4:
 111 0060 2E000000 		.word	.L3
 112 0064 42000000 		.word	.L5
 113 0068 A4000000 		.word	.L6
 114 006c B8000000 		.word	.L7
 115 0070 26010000 		.word	.L8
 116              		.section	.text.rx_int
 117              	.L3:
  45:.\main.c      ****         case HOME:
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 4


  46:.\main.c      ****             homeProcess(data);
 118              		.loc 1 46 0
 119 002e FB1D     		add	r3, r7, #7
 120 0030 1B78     		ldrb	r3, [r3]
 121 0032 181C     		mov	r0, r3
 122 0034 FFF7FEFF 		bl	homeProcess
  47:.\main.c      ****             UART_PutString("\r\n");
 123              		.loc 1 47 0
 124 0038 4C4B     		ldr	r3, .L19+8
 125 003a 181C     		mov	r0, r3
 126 003c FFF7FEFF 		bl	UART_PutString
  48:.\main.c      ****             break;
 127              		.loc 1 48 0
 128 0040 8DE0     		b	.L1
 129              	.L5:
  49:.\main.c      ****             
  50:.\main.c      ****         case SET_FREQ:
  51:.\main.c      ****             //gather input until enter is pressed
  52:.\main.c      ****             if(data > '0' && data < '9') {
 130              		.loc 1 52 0
 131 0042 FB1D     		add	r3, r7, #7
 132 0044 1B78     		ldrb	r3, [r3]
 133 0046 302B     		cmp	r3, #48
 134 0048 11D9     		bls	.L9
 135              		.loc 1 52 0 is_stmt 0 discriminator 1
 136 004a FB1D     		add	r3, r7, #7
 137 004c 1B78     		ldrb	r3, [r3]
 138 004e 382B     		cmp	r3, #56
 139 0050 0DD8     		bhi	.L9
  53:.\main.c      ****                 freq = freq*10 + (data-'0');            //Calculate the freq.
 140              		.loc 1 53 0 is_stmt 1
 141 0052 474B     		ldr	r3, .L19+12
 142 0054 1A68     		ldr	r2, [r3]
 143 0056 131C     		mov	r3, r2
 144 0058 9B00     		lsl	r3, r3, #2
 145 005a 9B18     		add	r3, r3, r2
 146 005c 5B00     		lsl	r3, r3, #1
 147 005e 1A1C     		mov	r2, r3
 148 0060 FB1D     		add	r3, r7, #7
 149 0062 1B78     		ldrb	r3, [r3]
 150 0064 303B     		sub	r3, r3, #48
 151 0066 D218     		add	r2, r2, r3
 152 0068 414B     		ldr	r3, .L19+12
 153 006a 1A60     		str	r2, [r3]
 154 006c 19E0     		b	.L10
 155              	.L9:
  54:.\main.c      ****             } else if(data =='\r' || data=='\n') {
 156              		.loc 1 54 0
 157 006e FB1D     		add	r3, r7, #7
 158 0070 1B78     		ldrb	r3, [r3]
 159 0072 0D2B     		cmp	r3, #13
 160 0074 03D0     		beq	.L11
 161              		.loc 1 54 0 is_stmt 0 discriminator 1
 162 0076 FB1D     		add	r3, r7, #7
 163 0078 1B78     		ldrb	r3, [r3]
 164 007a 0A2B     		cmp	r3, #10
 165 007c 11D1     		bne	.L10
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 5


 166              	.L11:
  55:.\main.c      ****                 switchFreq = 1000000/freq;        //convert frequency to delay time (us)
 167              		.loc 1 55 0 is_stmt 1
 168 007e 3C4B     		ldr	r3, .L19+12
 169 0080 1B68     		ldr	r3, [r3]
 170 0082 3C48     		ldr	r0, .L19+16
 171 0084 191C     		mov	r1, r3
 172 0086 FFF7FEFF 		bl	__aeabi_idiv
 173 008a 031C     		mov	r3, r0
 174 008c 1A1C     		mov	r2, r3
 175 008e 3A4B     		ldr	r3, .L19+20
 176 0090 1A60     		str	r2, [r3]
  56:.\main.c      ****                 status = HOME;
 177              		.loc 1 56 0
 178 0092 344B     		ldr	r3, .L19
 179 0094 0022     		mov	r2, #0
 180 0096 1A70     		strb	r2, [r3]
  57:.\main.c      ****                 UART_PutString("\r\n> ");
 181              		.loc 1 57 0
 182 0098 384B     		ldr	r3, .L19+24
 183 009a 181C     		mov	r0, r3
 184 009c FFF7FEFF 		bl	UART_PutString
  58:.\main.c      ****             }
  59:.\main.c      ****             break;
 185              		.loc 1 59 0
 186 00a0 5DE0     		b	.L1
 187              	.L10:
 188 00a2 5CE0     		b	.L1
 189              	.L6:
  60:.\main.c      ****             
  61:.\main.c      ****         case SET_SWITCH:
  62:.\main.c      ****             switchProcess(data);
 190              		.loc 1 62 0
 191 00a4 FB1D     		add	r3, r7, #7
 192 00a6 1B78     		ldrb	r3, [r3]
 193 00a8 181C     		mov	r0, r3
 194 00aa FFF7FEFF 		bl	switchProcess
  63:.\main.c      ****             UART_PutString("\r\n");
 195              		.loc 1 63 0
 196 00ae 2F4B     		ldr	r3, .L19+8
 197 00b0 181C     		mov	r0, r3
 198 00b2 FFF7FEFF 		bl	UART_PutString
  64:.\main.c      ****             break;
 199              		.loc 1 64 0
 200 00b6 52E0     		b	.L1
 201              	.L7:
  65:.\main.c      ****             
  66:.\main.c      ****         case QUESTION:
  67:.\main.c      ****             if(data == 'y' || data == 'Y') {
 202              		.loc 1 67 0
 203 00b8 FB1D     		add	r3, r7, #7
 204 00ba 1B78     		ldrb	r3, [r3]
 205 00bc 792B     		cmp	r3, #121
 206 00be 03D0     		beq	.L12
 207              		.loc 1 67 0 is_stmt 0 discriminator 1
 208 00c0 FB1D     		add	r3, r7, #7
 209 00c2 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 6


 210 00c4 592B     		cmp	r3, #89
 211 00c6 0DD1     		bne	.L13
 212              	.L12:
  68:.\main.c      ****                 status = SET_SWITCH;
 213              		.loc 1 68 0 is_stmt 1
 214 00c8 264B     		ldr	r3, .L19
 215 00ca 0222     		mov	r2, #2
 216 00cc 1A70     		strb	r2, [r3]
  69:.\main.c      ****                 UART_PutString("\r\n");
 217              		.loc 1 69 0
 218 00ce 274B     		ldr	r3, .L19+8
 219 00d0 181C     		mov	r0, r3
 220 00d2 FFF7FEFF 		bl	UART_PutString
  70:.\main.c      ****                 dispSwitchHelp();
 221              		.loc 1 70 0
 222 00d6 FFF7FEFF 		bl	dispSwitchHelp
  71:.\main.c      ****                 UART_PutString("> ");   
 223              		.loc 1 71 0
 224 00da 294B     		ldr	r3, .L19+28
 225 00dc 181C     		mov	r0, r3
 226 00de FFF7FEFF 		bl	UART_PutString
 227 00e2 1BE0     		b	.L14
 228              	.L13:
  72:.\main.c      ****             } else if(data == 'n' || data == 'N') {
 229              		.loc 1 72 0
 230 00e4 FB1D     		add	r3, r7, #7
 231 00e6 1B78     		ldrb	r3, [r3]
 232 00e8 6E2B     		cmp	r3, #110
 233 00ea 03D0     		beq	.L15
 234              		.loc 1 72 0 is_stmt 0 discriminator 1
 235 00ec FB1D     		add	r3, r7, #7
 236 00ee 1B78     		ldrb	r3, [r3]
 237 00f0 4E2B     		cmp	r3, #78
 238 00f2 0BD1     		bne	.L16
 239              	.L15:
  73:.\main.c      ****                 status = HOME;
 240              		.loc 1 73 0 is_stmt 1
 241 00f4 1B4B     		ldr	r3, .L19
 242 00f6 0022     		mov	r2, #0
 243 00f8 1A70     		strb	r2, [r3]
  74:.\main.c      ****                 UART_PutString("Returning to main menu, press 'h' for help.\r\n");
 244              		.loc 1 74 0
 245 00fa 224B     		ldr	r3, .L19+32
 246 00fc 181C     		mov	r0, r3
 247 00fe FFF7FEFF 		bl	UART_PutString
  75:.\main.c      ****                 UART_PutString("> ");                
 248              		.loc 1 75 0
 249 0102 1F4B     		ldr	r3, .L19+28
 250 0104 181C     		mov	r0, r3
 251 0106 FFF7FEFF 		bl	UART_PutString
 252 010a 07E0     		b	.L14
 253              	.L16:
  76:.\main.c      ****             } else {
  77:.\main.c      ****                 UART_PutString("Invalid response, choose: y/n\r\n");
 254              		.loc 1 77 0
 255 010c 1E4B     		ldr	r3, .L19+36
 256 010e 181C     		mov	r0, r3
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 7


 257 0110 FFF7FEFF 		bl	UART_PutString
  78:.\main.c      ****                 UART_PutString("> ");
 258              		.loc 1 78 0
 259 0114 1A4B     		ldr	r3, .L19+28
 260 0116 181C     		mov	r0, r3
 261 0118 FFF7FEFF 		bl	UART_PutString
 262              	.L14:
  79:.\main.c      ****             }
  80:.\main.c      ****             UART_PutString("\r\n");
 263              		.loc 1 80 0
 264 011c 134B     		ldr	r3, .L19+8
 265 011e 181C     		mov	r0, r3
 266 0120 FFF7FEFF 		bl	UART_PutString
  81:.\main.c      ****             break;
 267              		.loc 1 81 0
 268 0124 1BE0     		b	.L1
 269              	.L8:
  82:.\main.c      ****             
  83:.\main.c      ****         case DEBUG_MODE:
  84:.\main.c      ****             if(data == 'x') {
 270              		.loc 1 84 0
 271 0126 FB1D     		add	r3, r7, #7
 272 0128 1B78     		ldrb	r3, [r3]
 273 012a 782B     		cmp	r3, #120
 274 012c 0BD1     		bne	.L17
  85:.\main.c      ****                 status = HOME;           //move to main again
 275              		.loc 1 85 0
 276 012e 0D4B     		ldr	r3, .L19
 277 0130 0022     		mov	r2, #0
 278 0132 1A70     		strb	r2, [r3]
  86:.\main.c      ****                 UART_PutString("Returning to main menu, press 'h' for help.\r\n");
 279              		.loc 1 86 0
 280 0134 134B     		ldr	r3, .L19+32
 281 0136 181C     		mov	r0, r3
 282 0138 FFF7FEFF 		bl	UART_PutString
  87:.\main.c      ****                 UART_PutString("> ");  
 283              		.loc 1 87 0
 284 013c 104B     		ldr	r3, .L19+28
 285 013e 181C     		mov	r0, r3
 286 0140 FFF7FEFF 		bl	UART_PutString
 287 0144 0AE0     		b	.L18
 288              	.L17:
  88:.\main.c      ****             } else {
  89:.\main.c      ****                 curr=curr->next;
 289              		.loc 1 89 0
 290 0146 114B     		ldr	r3, .L19+40
 291 0148 1B68     		ldr	r3, [r3]
 292 014a 5A68     		ldr	r2, [r3, #4]
 293 014c 0F4B     		ldr	r3, .L19+40
 294 014e 1A60     		str	r2, [r3]
  90:.\main.c      ****                 updateOutput(curr->number);
 295              		.loc 1 90 0
 296 0150 0E4B     		ldr	r3, .L19+40
 297 0152 1B68     		ldr	r3, [r3]
 298 0154 1B88     		ldrh	r3, [r3]
 299 0156 181C     		mov	r0, r3
 300 0158 FFF7FEFF 		bl	updateOutput
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 8


 301              	.L18:
  91:.\main.c      ****             }
  92:.\main.c      ****             break;
 302              		.loc 1 92 0
 303 015c C046     		mov	r8, r8
 304              	.L1:
  93:.\main.c      ****     }
  94:.\main.c      **** }
 305              		.loc 1 94 0
 306 015e BD46     		mov	sp, r7
 307 0160 03B0     		add	sp, sp, #12
 308              		@ sp needed
 309 0162 90BD     		pop	{r4, r7, pc}
 310              	.L20:
 311              		.align	2
 312              	.L19:
 313 0164 00000000 		.word	status
 314 0168 60000000 		.word	.L4
 315 016c 00000000 		.word	.LC2
 316 0170 0C000000 		.word	freq.6452
 317 0174 40420F00 		.word	1000000
 318 0178 00000000 		.word	switchFreq
 319 017c 04000000 		.word	.LC6
 320 0180 0C000000 		.word	.LC8
 321 0184 10000000 		.word	.LC10
 322 0188 40000000 		.word	.LC12
 323 018c 00000000 		.word	curr
 324              		.cfi_endproc
 325              	.LFE34:
 326              		.size	rx_int, .-rx_int
 327              		.section	.text.main,"ax",%progbits
 328              		.align	2
 329              		.global	main
 330              		.code	16
 331              		.thumb_func
 332              		.type	main, %function
 333              	main:
 334              	.LFB35:
  95:.\main.c      **** 
  96:.\main.c      **** 
  97:.\main.c      **** int main() {    
 335              		.loc 1 97 0
 336              		.cfi_startproc
 337 0000 80B5     		push	{r7, lr}
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 7, -8
 340              		.cfi_offset 14, -4
 341 0002 00AF     		add	r7, sp, #0
 342              		.cfi_def_cfa_register 7
  98:.\main.c      ****     initHardware();
 343              		.loc 1 98 0
 344 0004 FFF7FEFF 		bl	initHardware
  99:.\main.c      ****         
 100:.\main.c      ****     for(;;) {
 101:.\main.c      ****         while(mode==MODEA) {                   // Loop through all the switches
 345              		.loc 1 101 0
 346 0008 0FE0     		b	.L22
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 9


 347              	.L23:
 102:.\main.c      ****             updateOutput(curr->number);
 348              		.loc 1 102 0
 349 000a 0D4B     		ldr	r3, .L26
 350 000c 1B68     		ldr	r3, [r3]
 351 000e 1B88     		ldrh	r3, [r3]
 352 0010 181C     		mov	r0, r3
 353 0012 FFF7FEFF 		bl	updateOutput
 103:.\main.c      ****             curr=curr->next;
 354              		.loc 1 103 0
 355 0016 0A4B     		ldr	r3, .L26
 356 0018 1B68     		ldr	r3, [r3]
 357 001a 5A68     		ldr	r2, [r3, #4]
 358 001c 084B     		ldr	r3, .L26
 359 001e 1A60     		str	r2, [r3]
 104:.\main.c      ****             CyDelay(switchFreq);                //Delay for switchFreq;    
 360              		.loc 1 104 0
 361 0020 084B     		ldr	r3, .L26+4
 362 0022 1B68     		ldr	r3, [r3]
 363 0024 181C     		mov	r0, r3
 364 0026 FFF7FEFF 		bl	CyDelay
 365              	.L22:
 101:.\main.c      ****         while(mode==MODEA) {                   // Loop through all the switches
 366              		.loc 1 101 0 discriminator 1
 367 002a 074B     		ldr	r3, .L26+8
 368 002c 1B78     		ldrb	r3, [r3]
 369 002e 002B     		cmp	r3, #0
 370 0030 EBD0     		beq	.L23
 105:.\main.c      ****         }
 106:.\main.c      ****         
 107:.\main.c      ****         while(mode==MODEB){}
 371              		.loc 1 107 0
 372 0032 C046     		mov	r8, r8
 373              	.L24:
 374              		.loc 1 107 0 is_stmt 0 discriminator 1
 375 0034 044B     		ldr	r3, .L26+8
 376 0036 1B78     		ldrb	r3, [r3]
 377 0038 012B     		cmp	r3, #1
 378 003a FBD0     		beq	.L24
 108:.\main.c      ****     }
 379              		.loc 1 108 0 is_stmt 1
 380 003c C046     		mov	r8, r8
 101:.\main.c      ****         while(mode==MODEA) {                   // Loop through all the switches
 381              		.loc 1 101 0
 382 003e F4E7     		b	.L22
 383              	.L27:
 384              		.align	2
 385              	.L26:
 386 0040 00000000 		.word	curr
 387 0044 00000000 		.word	switchFreq
 388 0048 00000000 		.word	mode
 389              		.cfi_endproc
 390              	.LFE35:
 391              		.size	main, .-main
 392              		.section	.text.updateOutput,"ax",%progbits
 393              		.align	2
 394              		.global	updateOutput
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 10


 395              		.code	16
 396              		.thumb_func
 397              		.type	updateOutput, %function
 398              	updateOutput:
 399              	.LFB36:
 109:.\main.c      **** }
 110:.\main.c      **** 
 111:.\main.c      **** 
 112:.\main.c      **** /**     void updateOutput(int switchNo)
 113:.\main.c      ****  *      @param
 114:.\main.c      ****  *          int switchNo
 115:.\main.c      ****  *      @ret
 116:.\main.c      ****  *          void
 117:.\main.c      ****  *
 118:.\main.c      ****  *      Updates the output 
 119:.\main.c      ****  */
 120:.\main.c      **** void updateOutput(int switchNo) {
 400              		.loc 1 120 0
 401              		.cfi_startproc
 402 0000 80B5     		push	{r7, lr}
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 7, -8
 405              		.cfi_offset 14, -4
 406 0002 84B0     		sub	sp, sp, #16
 407              		.cfi_def_cfa_offset 24
 408 0004 00AF     		add	r7, sp, #0
 409              		.cfi_def_cfa_register 7
 410 0006 7860     		str	r0, [r7, #4]
 121:.\main.c      ****     uint8 val;
 122:.\main.c      ****     val=OutputReg_Read() & 240;                     // XXXX XXXX & 1111 0000 = XXXX 0000
 411              		.loc 1 122 0
 412 0008 FFF7FEFF 		bl	OutputReg_Read
 413 000c 031C     		mov	r3, r0
 414 000e 1A1C     		mov	r2, r3
 415 0010 3B1C     		mov	r3, r7
 416 0012 0F33     		add	r3, r3, #15
 417 0014 0F21     		mov	r1, #15
 418 0016 8A43     		bic	r2, r1
 419 0018 1A70     		strb	r2, [r3]
 123:.\main.c      ****     OutputReg_Write(val|switchNo);                  // XXXX 0000 | 0000 YYYY = XXXX YYYY 
 420              		.loc 1 123 0
 421 001a 7B68     		ldr	r3, [r7, #4]
 422 001c DAB2     		uxtb	r2, r3
 423 001e 3B1C     		mov	r3, r7
 424 0020 0F33     		add	r3, r3, #15
 425 0022 1B78     		ldrb	r3, [r3]
 426 0024 1343     		orr	r3, r2
 427 0026 DBB2     		uxtb	r3, r3
 428 0028 DBB2     		uxtb	r3, r3
 429 002a 181C     		mov	r0, r3
 430 002c FFF7FEFF 		bl	OutputReg_Write
 124:.\main.c      **** }
 431              		.loc 1 124 0
 432 0030 BD46     		mov	sp, r7
 433 0032 04B0     		add	sp, sp, #16
 434              		@ sp needed
 435 0034 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 11


 436              		.cfi_endproc
 437              	.LFE36:
 438              		.size	updateOutput, .-updateOutput
 439 0036 C046     		.section	.text.updatePower,"ax",%progbits
 440              		.align	2
 441              		.global	updatePower
 442              		.code	16
 443              		.thumb_func
 444              		.type	updatePower, %function
 445              	updatePower:
 446              	.LFB37:
 125:.\main.c      **** 
 126:.\main.c      **** 
 127:.\main.c      **** /*      void updatePower(void)
 128:.\main.c      ****  *      @param
 129:.\main.c      ****  *          void
 130:.\main.c      ****  *      @ret
 131:.\main.c      ****  *          void
 132:.\main.c      ****  *
 133:.\main.c      ****  *      Inialises all switches to be on, creates the linked list
 134:.\main.c      ****  *      and links all the switches together in a standard order.
 135:.\main.c      ****  */
 136:.\main.c      **** void updatePower(void) {
 447              		.loc 1 136 0
 448              		.cfi_startproc
 449 0000 90B5     		push	{r4, r7, lr}
 450              		.cfi_def_cfa_offset 12
 451              		.cfi_offset 4, -12
 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 83B0     		sub	sp, sp, #12
 455              		.cfi_def_cfa_offset 24
 456 0004 00AF     		add	r7, sp, #0
 457              		.cfi_def_cfa_register 7
 137:.\main.c      ****     uint8 data = OutputReg_Read();
 458              		.loc 1 137 0
 459 0006 FC1D     		add	r4, r7, #7
 460 0008 FFF7FEFF 		bl	OutputReg_Read
 461 000c 031C     		mov	r3, r0
 462 000e 2370     		strb	r3, [r4]
 138:.\main.c      ****     data &= 239;        // XXXX XXXX & 1110 1111 = XXX0 XXXX
 463              		.loc 1 138 0
 464 0010 FB1D     		add	r3, r7, #7
 465 0012 FA1D     		add	r2, r7, #7
 466 0014 1278     		ldrb	r2, [r2]
 467 0016 1021     		mov	r1, #16
 468 0018 8A43     		bic	r2, r1
 469 001a 1A70     		strb	r2, [r3]
 139:.\main.c      ****     if(power) {
 470              		.loc 1 139 0
 471 001c 084B     		ldr	r3, .L31
 472 001e 1B78     		ldrb	r3, [r3]
 473 0020 002B     		cmp	r3, #0
 474 0022 05D0     		beq	.L30
 140:.\main.c      ****         data |= 16;     //XXX0 XXXX | 0001 0000 = XXX1 XXXX 
 475              		.loc 1 140 0
 476 0024 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 12


 477 0026 FA1D     		add	r2, r7, #7
 478 0028 1278     		ldrb	r2, [r2]
 479 002a 1021     		mov	r1, #16
 480 002c 0A43     		orr	r2, r1
 481 002e 1A70     		strb	r2, [r3]
 482              	.L30:
 141:.\main.c      ****     }
 142:.\main.c      ****     OutputReg_Write(data);
 483              		.loc 1 142 0
 484 0030 FB1D     		add	r3, r7, #7
 485 0032 1B78     		ldrb	r3, [r3]
 486 0034 181C     		mov	r0, r3
 487 0036 FFF7FEFF 		bl	OutputReg_Write
 143:.\main.c      **** }
 488              		.loc 1 143 0
 489 003a BD46     		mov	sp, r7
 490 003c 03B0     		add	sp, sp, #12
 491              		@ sp needed
 492 003e 90BD     		pop	{r4, r7, pc}
 493              	.L32:
 494              		.align	2
 495              	.L31:
 496 0040 00000000 		.word	power
 497              		.cfi_endproc
 498              	.LFE37:
 499              		.size	updatePower, .-updatePower
 500              		.section	.text.initSwitches,"ax",%progbits
 501              		.align	2
 502              		.global	initSwitches
 503              		.code	16
 504              		.thumb_func
 505              		.type	initSwitches, %function
 506              	initSwitches:
 507              	.LFB38:
 144:.\main.c      **** 
 145:.\main.c      **** 
 146:.\main.c      **** /*      void initSwitches(void)
 147:.\main.c      ****  *      @param
 148:.\main.c      ****  *          void
 149:.\main.c      ****  *      @ret
 150:.\main.c      ****  *          void
 151:.\main.c      ****  *
 152:.\main.c      ****  *      Inialises all switches to be on, creates the linked list
 153:.\main.c      ****  *      and links all the switches together in a standard order.
 154:.\main.c      ****  */
 155:.\main.c      **** void initSwitches(void) {
 508              		.loc 1 155 0
 509              		.cfi_startproc
 510 0000 80B5     		push	{r7, lr}
 511              		.cfi_def_cfa_offset 8
 512              		.cfi_offset 7, -8
 513              		.cfi_offset 14, -4
 514 0002 82B0     		sub	sp, sp, #8
 515              		.cfi_def_cfa_offset 16
 516 0004 00AF     		add	r7, sp, #0
 517              		.cfi_def_cfa_register 7
 156:.\main.c      ****     int i;
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 13


 157:.\main.c      ****     node_t *tmp = NULL;
 518              		.loc 1 157 0
 519 0006 0023     		mov	r3, #0
 520 0008 3B60     		str	r3, [r7]
 158:.\main.c      ****     head = curr = malloc(sizeof(node_t));
 521              		.loc 1 158 0
 522 000a 0C20     		mov	r0, #12
 523 000c FFF7FEFF 		bl	malloc
 524 0010 031C     		mov	r3, r0
 525 0012 1A1C     		mov	r2, r3
 526 0014 1B4B     		ldr	r3, .L36
 527 0016 1A60     		str	r2, [r3]
 528 0018 1A4B     		ldr	r3, .L36
 529 001a 1A68     		ldr	r2, [r3]
 530 001c 1A4B     		ldr	r3, .L36+4
 531 001e 1A60     		str	r2, [r3]
 159:.\main.c      ****     head->number = 0;
 532              		.loc 1 159 0
 533 0020 194B     		ldr	r3, .L36+4
 534 0022 1B68     		ldr	r3, [r3]
 535 0024 0022     		mov	r2, #0
 536 0026 1A80     		strh	r2, [r3]
 160:.\main.c      ****     for(i=1; i<MAX_SWITCHES; i++) {
 537              		.loc 1 160 0
 538 0028 0123     		mov	r3, #1
 539 002a 7B60     		str	r3, [r7, #4]
 540 002c 16E0     		b	.L34
 541              	.L35:
 161:.\main.c      ****         tmp = malloc(sizeof(node_t));
 542              		.loc 1 161 0 discriminator 2
 543 002e 0C20     		mov	r0, #12
 544 0030 FFF7FEFF 		bl	malloc
 545 0034 031C     		mov	r3, r0
 546 0036 3B60     		str	r3, [r7]
 162:.\main.c      ****         tmp->number=i;
 547              		.loc 1 162 0 discriminator 2
 548 0038 7B68     		ldr	r3, [r7, #4]
 549 003a 9AB2     		uxth	r2, r3
 550 003c 3B68     		ldr	r3, [r7]
 551 003e 1A80     		strh	r2, [r3]
 163:.\main.c      ****         curr->next = tmp;
 552              		.loc 1 163 0 discriminator 2
 553 0040 104B     		ldr	r3, .L36
 554 0042 1B68     		ldr	r3, [r3]
 555 0044 3A68     		ldr	r2, [r7]
 556 0046 5A60     		str	r2, [r3, #4]
 164:.\main.c      ****         tmp->prev=curr;
 557              		.loc 1 164 0 discriminator 2
 558 0048 0E4B     		ldr	r3, .L36
 559 004a 1A68     		ldr	r2, [r3]
 560 004c 3B68     		ldr	r3, [r7]
 561 004e 9A60     		str	r2, [r3, #8]
 165:.\main.c      ****         curr=tmp;
 562              		.loc 1 165 0 discriminator 2
 563 0050 0C4B     		ldr	r3, .L36
 564 0052 3A68     		ldr	r2, [r7]
 565 0054 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 14


 160:.\main.c      ****     for(i=1; i<MAX_SWITCHES; i++) {
 566              		.loc 1 160 0 discriminator 2
 567 0056 7B68     		ldr	r3, [r7, #4]
 568 0058 0133     		add	r3, r3, #1
 569 005a 7B60     		str	r3, [r7, #4]
 570              	.L34:
 160:.\main.c      ****     for(i=1; i<MAX_SWITCHES; i++) {
 571              		.loc 1 160 0 is_stmt 0 discriminator 1
 572 005c 7B68     		ldr	r3, [r7, #4]
 573 005e 0F2B     		cmp	r3, #15
 574 0060 E5DD     		ble	.L35
 166:.\main.c      ****     }
 167:.\main.c      ****     curr->next = head;
 575              		.loc 1 167 0 is_stmt 1
 576 0062 084B     		ldr	r3, .L36
 577 0064 1B68     		ldr	r3, [r3]
 578 0066 084A     		ldr	r2, .L36+4
 579 0068 1268     		ldr	r2, [r2]
 580 006a 5A60     		str	r2, [r3, #4]
 168:.\main.c      ****     head->prev = curr;
 581              		.loc 1 168 0
 582 006c 064B     		ldr	r3, .L36+4
 583 006e 1B68     		ldr	r3, [r3]
 584 0070 044A     		ldr	r2, .L36
 585 0072 1268     		ldr	r2, [r2]
 586 0074 9A60     		str	r2, [r3, #8]
 169:.\main.c      ****     curr = head;                //Set curr at the HEAD
 587              		.loc 1 169 0
 588 0076 044B     		ldr	r3, .L36+4
 589 0078 1A68     		ldr	r2, [r3]
 590 007a 024B     		ldr	r3, .L36
 591 007c 1A60     		str	r2, [r3]
 170:.\main.c      **** }
 592              		.loc 1 170 0
 593 007e BD46     		mov	sp, r7
 594 0080 02B0     		add	sp, sp, #8
 595              		@ sp needed
 596 0082 80BD     		pop	{r7, pc}
 597              	.L37:
 598              		.align	2
 599              	.L36:
 600 0084 00000000 		.word	curr
 601 0088 00000000 		.word	head
 602              		.cfi_endproc
 603              	.LFE38:
 604              		.size	initSwitches, .-initSwitches
 605              		.section	.text.addSwitch,"ax",%progbits
 606              		.align	2
 607              		.global	addSwitch
 608              		.code	16
 609              		.thumb_func
 610              		.type	addSwitch, %function
 611              	addSwitch:
 612              	.LFB39:
 171:.\main.c      **** 
 172:.\main.c      **** 
 173:.\main.c      **** /*      bool addSwitch(int switchNo)
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 15


 174:.\main.c      ****  *      @param
 175:.\main.c      ****  *          int switchNo
 176:.\main.c      ****  *      @ret
 177:.\main.c      ****  *          bool: true if switch was added, false if switch couldnt be added
 178:.\main.c      ****  *
 179:.\main.c      ****  *      Adds new switch to the linked list
 180:.\main.c      ****  */
 181:.\main.c      **** bool addSwitch(int switchNo) {
 613              		.loc 1 181 0
 614              		.cfi_startproc
 615 0000 80B5     		push	{r7, lr}
 616              		.cfi_def_cfa_offset 8
 617              		.cfi_offset 7, -8
 618              		.cfi_offset 14, -4
 619 0002 84B0     		sub	sp, sp, #16
 620              		.cfi_def_cfa_offset 24
 621 0004 00AF     		add	r7, sp, #0
 622              		.cfi_def_cfa_register 7
 623 0006 7860     		str	r0, [r7, #4]
 182:.\main.c      ****     node_t *tmp=head, *newNode=NULL;
 624              		.loc 1 182 0
 625 0008 1F4B     		ldr	r3, .L43
 626 000a 1B68     		ldr	r3, [r3]
 627 000c FB60     		str	r3, [r7, #12]
 628 000e 0023     		mov	r3, #0
 629 0010 BB60     		str	r3, [r7, #8]
 630              	.L42:
 183:.\main.c      ****     do{
 184:.\main.c      ****         if(tmp->number == switchNo) {
 631              		.loc 1 184 0
 632 0012 FB68     		ldr	r3, [r7, #12]
 633 0014 1B88     		ldrh	r3, [r3]
 634 0016 1A1C     		mov	r2, r3
 635 0018 7B68     		ldr	r3, [r7, #4]
 636 001a 9A42     		cmp	r2, r3
 637 001c 01D1     		bne	.L39
 185:.\main.c      ****             return false;
 638              		.loc 1 185 0
 639 001e 0023     		mov	r3, #0
 640 0020 2EE0     		b	.L40
 641              	.L39:
 186:.\main.c      ****         } else if(tmp->number < switchNo && tmp->next->number > switchNo) {
 642              		.loc 1 186 0
 643 0022 FB68     		ldr	r3, [r7, #12]
 644 0024 1B88     		ldrh	r3, [r3]
 645 0026 1A1C     		mov	r2, r3
 646 0028 7B68     		ldr	r3, [r7, #4]
 647 002a 9A42     		cmp	r2, r3
 648 002c 1FDA     		bge	.L41
 649              		.loc 1 186 0 is_stmt 0 discriminator 1
 650 002e FB68     		ldr	r3, [r7, #12]
 651 0030 5B68     		ldr	r3, [r3, #4]
 652 0032 1B88     		ldrh	r3, [r3]
 653 0034 1A1C     		mov	r2, r3
 654 0036 7B68     		ldr	r3, [r7, #4]
 655 0038 9A42     		cmp	r2, r3
 656 003a 18DD     		ble	.L41
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 16


 187:.\main.c      ****             ///create the new node and add it to the linked list
 188:.\main.c      ****             newNode=malloc(sizeof(node_t));
 657              		.loc 1 188 0 is_stmt 1
 658 003c 0C20     		mov	r0, #12
 659 003e FFF7FEFF 		bl	malloc
 660 0042 031C     		mov	r3, r0
 661 0044 BB60     		str	r3, [r7, #8]
 189:.\main.c      ****             newNode->number=switchNo;
 662              		.loc 1 189 0
 663 0046 7B68     		ldr	r3, [r7, #4]
 664 0048 9AB2     		uxth	r2, r3
 665 004a BB68     		ldr	r3, [r7, #8]
 666 004c 1A80     		strh	r2, [r3]
 190:.\main.c      ****             newNode->prev = tmp;
 667              		.loc 1 190 0
 668 004e BB68     		ldr	r3, [r7, #8]
 669 0050 FA68     		ldr	r2, [r7, #12]
 670 0052 9A60     		str	r2, [r3, #8]
 191:.\main.c      ****             newNode->next=tmp->next;
 671              		.loc 1 191 0
 672 0054 FB68     		ldr	r3, [r7, #12]
 673 0056 5A68     		ldr	r2, [r3, #4]
 674 0058 BB68     		ldr	r3, [r7, #8]
 675 005a 5A60     		str	r2, [r3, #4]
 192:.\main.c      ****             
 193:.\main.c      ****             //link list to new node
 194:.\main.c      ****             tmp->next = newNode;
 676              		.loc 1 194 0
 677 005c FB68     		ldr	r3, [r7, #12]
 678 005e BA68     		ldr	r2, [r7, #8]
 679 0060 5A60     		str	r2, [r3, #4]
 195:.\main.c      ****             tmp->next->prev = newNode;
 680              		.loc 1 195 0
 681 0062 FB68     		ldr	r3, [r7, #12]
 682 0064 5B68     		ldr	r3, [r3, #4]
 683 0066 BA68     		ldr	r2, [r7, #8]
 684 0068 9A60     		str	r2, [r3, #8]
 196:.\main.c      ****             return true;
 685              		.loc 1 196 0
 686 006a 0123     		mov	r3, #1
 687 006c 08E0     		b	.L40
 688              	.L41:
 197:.\main.c      ****         }
 198:.\main.c      ****         tmp=tmp->next;
 689              		.loc 1 198 0
 690 006e FB68     		ldr	r3, [r7, #12]
 691 0070 5B68     		ldr	r3, [r3, #4]
 692 0072 FB60     		str	r3, [r7, #12]
 199:.\main.c      ****     }while(tmp!=head);
 693              		.loc 1 199 0
 694 0074 044B     		ldr	r3, .L43
 695 0076 1B68     		ldr	r3, [r3]
 696 0078 FA68     		ldr	r2, [r7, #12]
 697 007a 9A42     		cmp	r2, r3
 698 007c C9D1     		bne	.L42
 200:.\main.c      ****     
 201:.\main.c      ****     return false;
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 17


 699              		.loc 1 201 0
 700 007e 0023     		mov	r3, #0
 701              	.L40:
 202:.\main.c      **** }
 702              		.loc 1 202 0
 703 0080 181C     		mov	r0, r3
 704 0082 BD46     		mov	sp, r7
 705 0084 04B0     		add	sp, sp, #16
 706              		@ sp needed
 707 0086 80BD     		pop	{r7, pc}
 708              	.L44:
 709              		.align	2
 710              	.L43:
 711 0088 00000000 		.word	head
 712              		.cfi_endproc
 713              	.LFE39:
 714              		.size	addSwitch, .-addSwitch
 715              		.section	.text.removeSwitch,"ax",%progbits
 716              		.align	2
 717              		.global	removeSwitch
 718              		.code	16
 719              		.thumb_func
 720              		.type	removeSwitch, %function
 721              	removeSwitch:
 722              	.LFB40:
 203:.\main.c      **** 
 204:.\main.c      **** 
 205:.\main.c      **** /*      bool addSwitch(int switchNo)
 206:.\main.c      ****  *      @param
 207:.\main.c      ****  *          int switchNo
 208:.\main.c      ****  *      @ret
 209:.\main.c      ****  *          bool: true if switch was removed, false if switch couldnt be removed
 210:.\main.c      ****  *
 211:.\main.c      ****  *      Removes switch if it has the parsed number from the linked list
 212:.\main.c      ****  */
 213:.\main.c      **** bool removeSwitch(int switchNo) {
 723              		.loc 1 213 0
 724              		.cfi_startproc
 725 0000 80B5     		push	{r7, lr}
 726              		.cfi_def_cfa_offset 8
 727              		.cfi_offset 7, -8
 728              		.cfi_offset 14, -4
 729 0002 84B0     		sub	sp, sp, #16
 730              		.cfi_def_cfa_offset 24
 731 0004 00AF     		add	r7, sp, #0
 732              		.cfi_def_cfa_register 7
 733 0006 7860     		str	r0, [r7, #4]
 214:.\main.c      ****     node_t *tmp = head;
 734              		.loc 1 214 0
 735 0008 184B     		ldr	r3, .L49
 736 000a 1B68     		ldr	r3, [r3]
 737 000c FB60     		str	r3, [r7, #12]
 215:.\main.c      ****     if(tmp->number == switchNo) {
 738              		.loc 1 215 0
 739 000e FB68     		ldr	r3, [r7, #12]
 740 0010 1B88     		ldrh	r3, [r3]
 741 0012 1A1C     		mov	r2, r3
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 18


 742 0014 7B68     		ldr	r3, [r7, #4]
 743 0016 9A42     		cmp	r2, r3
 744 0018 0AD1     		bne	.L46
 216:.\main.c      ****         tmp->prev->next = tmp->next;
 745              		.loc 1 216 0
 746 001a FB68     		ldr	r3, [r7, #12]
 747 001c 9B68     		ldr	r3, [r3, #8]
 748 001e FA68     		ldr	r2, [r7, #12]
 749 0020 5268     		ldr	r2, [r2, #4]
 750 0022 5A60     		str	r2, [r3, #4]
 217:.\main.c      ****         free(tmp);
 751              		.loc 1 217 0
 752 0024 FB68     		ldr	r3, [r7, #12]
 753 0026 181C     		mov	r0, r3
 754 0028 FFF7FEFF 		bl	free
 218:.\main.c      ****         return true;
 755              		.loc 1 218 0
 756 002c 0123     		mov	r3, #1
 757 002e 19E0     		b	.L47
 758              	.L46:
 219:.\main.c      ****     }
 220:.\main.c      ****     do{
 221:.\main.c      ****         tmp=tmp->next;
 759              		.loc 1 221 0
 760 0030 FB68     		ldr	r3, [r7, #12]
 761 0032 5B68     		ldr	r3, [r3, #4]
 762 0034 FB60     		str	r3, [r7, #12]
 222:.\main.c      ****         if(tmp->number == switchNo) {
 763              		.loc 1 222 0
 764 0036 FB68     		ldr	r3, [r7, #12]
 765 0038 1B88     		ldrh	r3, [r3]
 766 003a 1A1C     		mov	r2, r3
 767 003c 7B68     		ldr	r3, [r7, #4]
 768 003e 9A42     		cmp	r2, r3
 769 0040 0AD1     		bne	.L48
 223:.\main.c      ****             tmp->prev->next = tmp->next;
 770              		.loc 1 223 0
 771 0042 FB68     		ldr	r3, [r7, #12]
 772 0044 9B68     		ldr	r3, [r3, #8]
 773 0046 FA68     		ldr	r2, [r7, #12]
 774 0048 5268     		ldr	r2, [r2, #4]
 775 004a 5A60     		str	r2, [r3, #4]
 224:.\main.c      ****             free(tmp);
 776              		.loc 1 224 0
 777 004c FB68     		ldr	r3, [r7, #12]
 778 004e 181C     		mov	r0, r3
 779 0050 FFF7FEFF 		bl	free
 225:.\main.c      ****             return true;
 780              		.loc 1 225 0
 781 0054 0123     		mov	r3, #1
 782 0056 05E0     		b	.L47
 783              	.L48:
 226:.\main.c      ****         }
 227:.\main.c      ****     }while(tmp!=head);
 784              		.loc 1 227 0
 785 0058 044B     		ldr	r3, .L49
 786 005a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 19


 787 005c FA68     		ldr	r2, [r7, #12]
 788 005e 9A42     		cmp	r2, r3
 789 0060 E6D1     		bne	.L46
 228:.\main.c      ****     
 229:.\main.c      ****     //If we got here then the switch no was not active
 230:.\main.c      ****     return false;
 790              		.loc 1 230 0
 791 0062 0023     		mov	r3, #0
 792              	.L47:
 231:.\main.c      **** }
 793              		.loc 1 231 0
 794 0064 181C     		mov	r0, r3
 795 0066 BD46     		mov	sp, r7
 796 0068 04B0     		add	sp, sp, #16
 797              		@ sp needed
 798 006a 80BD     		pop	{r7, pc}
 799              	.L50:
 800              		.align	2
 801              	.L49:
 802 006c 00000000 		.word	head
 803              		.cfi_endproc
 804              	.LFE40:
 805              		.size	removeSwitch, .-removeSwitch
 806              		.section	.text.isSwitchActive,"ax",%progbits
 807              		.align	2
 808              		.global	isSwitchActive
 809              		.code	16
 810              		.thumb_func
 811              		.type	isSwitchActive, %function
 812              	isSwitchActive:
 813              	.LFB41:
 232:.\main.c      **** 
 233:.\main.c      **** 
 234:.\main.c      **** /*      bool isSwitchActive(int switchNumber)
 235:.\main.c      ****  *      @param
 236:.\main.c      ****  *          int switchNumber
 237:.\main.c      ****  *      @ret
 238:.\main.c      ****  *          bool: true if switch was removed, false if switch couldnt be removed
 239:.\main.c      ****  *
 240:.\main.c      ****  *      Checks to see if the switch number is currently in the linked list
 241:.\main.c      ****  */
 242:.\main.c      **** bool isSwitchActive(int switchNumber) {
 814              		.loc 1 242 0
 815              		.cfi_startproc
 816 0000 80B5     		push	{r7, lr}
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 7, -8
 819              		.cfi_offset 14, -4
 820 0002 84B0     		sub	sp, sp, #16
 821              		.cfi_def_cfa_offset 24
 822 0004 00AF     		add	r7, sp, #0
 823              		.cfi_def_cfa_register 7
 824 0006 7860     		str	r0, [r7, #4]
 243:.\main.c      ****     node_t *tmp = head;
 825              		.loc 1 243 0
 826 0008 0B4B     		ldr	r3, .L55
 827 000a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 20


 828 000c FB60     		str	r3, [r7, #12]
 829              	.L54:
 244:.\main.c      ****     do{
 245:.\main.c      ****         if(tmp->number == switchNumber) {
 830              		.loc 1 245 0
 831 000e FB68     		ldr	r3, [r7, #12]
 832 0010 1B88     		ldrh	r3, [r3]
 833 0012 1A1C     		mov	r2, r3
 834 0014 7B68     		ldr	r3, [r7, #4]
 835 0016 9A42     		cmp	r2, r3
 836 0018 01D1     		bne	.L52
 246:.\main.c      ****             return true;
 837              		.loc 1 246 0
 838 001a 0123     		mov	r3, #1
 839 001c 08E0     		b	.L53
 840              	.L52:
 247:.\main.c      ****         }
 248:.\main.c      ****         tmp=tmp->next;
 841              		.loc 1 248 0
 842 001e FB68     		ldr	r3, [r7, #12]
 843 0020 5B68     		ldr	r3, [r3, #4]
 844 0022 FB60     		str	r3, [r7, #12]
 249:.\main.c      ****     }while(tmp!=head);
 845              		.loc 1 249 0
 846 0024 044B     		ldr	r3, .L55
 847 0026 1B68     		ldr	r3, [r3]
 848 0028 FA68     		ldr	r2, [r7, #12]
 849 002a 9A42     		cmp	r2, r3
 850 002c EFD1     		bne	.L54
 250:.\main.c      ****     return false;
 851              		.loc 1 250 0
 852 002e 0023     		mov	r3, #0
 853              	.L53:
 251:.\main.c      **** }
 854              		.loc 1 251 0
 855 0030 181C     		mov	r0, r3
 856 0032 BD46     		mov	sp, r7
 857 0034 04B0     		add	sp, sp, #16
 858              		@ sp needed
 859 0036 80BD     		pop	{r7, pc}
 860              	.L56:
 861              		.align	2
 862              	.L55:
 863 0038 00000000 		.word	head
 864              		.cfi_endproc
 865              	.LFE41:
 866              		.size	isSwitchActive, .-isSwitchActive
 867              		.section	.rodata
 868              		.align	2
 869              	.LC25:
 870 0074 0D0A0D0A 		.ascii	"\015\012\015\012\000"
 870      00
 871 0079 000000   		.section	.text.initHardware,"ax",%progbits
 872              		.align	2
 873              		.global	initHardware
 874              		.code	16
 875              		.thumb_func
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 21


 876              		.type	initHardware, %function
 877              	initHardware:
 878              	.LFB42:
 252:.\main.c      **** 
 253:.\main.c      **** 
 254:.\main.c      **** /*      void initHardware(void)
 255:.\main.c      ****  *      @param
 256:.\main.c      ****  *          void
 257:.\main.c      ****  *      @ret
 258:.\main.c      ****  *          void
 259:.\main.c      ****  *
 260:.\main.c      ****  *      Initalised the hardware that is used by the microcontroller for the switch matrix
 261:.\main.c      ****  */
 262:.\main.c      **** void initHardware(void) {
 879              		.loc 1 262 0
 880              		.cfi_startproc
 881 0000 80B5     		push	{r7, lr}
 882              		.cfi_def_cfa_offset 8
 883              		.cfi_offset 7, -8
 884              		.cfi_offset 14, -4
 885 0002 00AF     		add	r7, sp, #0
 886              		.cfi_def_cfa_register 7
 263:.\main.c      ****     CyGlobalIntEnable;
 887              		.loc 1 263 0
 888              	@ 263 ".\main.c" 1
 889 0004 62B6     		CPSIE   i
 890              	@ 0 "" 2
 264:.\main.c      ****     UART_Start();                   //Setup UART comm.
 891              		.loc 1 264 0
 892              		.code	16
 893 0006 FFF7FEFF 		bl	UART_Start
 265:.\main.c      ****     uartRx_isr_StartEx(rx_int);     //Inialise Rx ISR
 894              		.loc 1 265 0
 895 000a 0A4B     		ldr	r3, .L58
 896 000c 181C     		mov	r0, r3
 897 000e FFF7FEFF 		bl	uartRx_isr_StartEx
 266:.\main.c      ****     UART_PutString("\r\n\r\n");
 898              		.loc 1 266 0
 899 0012 094B     		ldr	r3, .L58+4
 900 0014 181C     		mov	r0, r3
 901 0016 FFF7FEFF 		bl	UART_PutString
 267:.\main.c      ****     OutputReg_Write(0u);            //Set all vaules to 0
 902              		.loc 1 267 0
 903 001a 0020     		mov	r0, #0
 904 001c FFF7FEFF 		bl	OutputReg_Write
 268:.\main.c      ****     
 269:.\main.c      ****     initSwitches();
 905              		.loc 1 269 0
 906 0020 FFF7FEFF 		bl	initSwitches
 270:.\main.c      ****     
 271:.\main.c      ****     dispMenuHelp();
 907              		.loc 1 271 0
 908 0024 FFF7FEFF 		bl	dispMenuHelp
 272:.\main.c      ****     UART_PutString("> ");
 909              		.loc 1 272 0
 910 0028 044B     		ldr	r3, .L58+8
 911 002a 181C     		mov	r0, r3
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 22


 912 002c FFF7FEFF 		bl	UART_PutString
 273:.\main.c      **** }
 913              		.loc 1 273 0
 914 0030 BD46     		mov	sp, r7
 915              		@ sp needed
 916 0032 80BD     		pop	{r7, pc}
 917              	.L59:
 918              		.align	2
 919              	.L58:
 920 0034 00000000 		.word	rx_int
 921 0038 74000000 		.word	.LC25
 922 003c 0C000000 		.word	.LC8
 923              		.cfi_endproc
 924              	.LFE42:
 925              		.size	initHardware, .-initHardware
 926              		.bss
 927 0009 000000   		.align	2
 928              	freq.6452:
 929 000c 00000000 		.space	4
 930              		.text
 931              	.Letext0:
 932              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 933              		.file 3 "./main.h"
 934              		.section	.debug_info,"",%progbits
 935              	.Ldebug_info0:
 936 0000 44030000 		.4byte	0x344
 937 0004 0400     		.2byte	0x4
 938 0006 00000000 		.4byte	.Ldebug_abbrev0
 939 000a 04       		.byte	0x4
 940 000b 01       		.uleb128 0x1
 941 000c 93000000 		.4byte	.LASF50
 942 0010 01       		.byte	0x1
 943 0011 49010000 		.4byte	.LASF51
 944 0015 09020000 		.4byte	.LASF52
 945 0019 00000000 		.4byte	.Ldebug_ranges0+0
 946 001d 00000000 		.4byte	0
 947 0021 00000000 		.4byte	.Ldebug_line0
 948 0025 02       		.uleb128 0x2
 949 0026 01       		.byte	0x1
 950 0027 06       		.byte	0x6
 951 0028 7D020000 		.4byte	.LASF0
 952 002c 02       		.uleb128 0x2
 953 002d 01       		.byte	0x1
 954 002e 08       		.byte	0x8
 955 002f 52010000 		.4byte	.LASF1
 956 0033 02       		.uleb128 0x2
 957 0034 02       		.byte	0x2
 958 0035 05       		.byte	0x5
 959 0036 86010000 		.4byte	.LASF2
 960 003a 02       		.uleb128 0x2
 961 003b 02       		.byte	0x2
 962 003c 07       		.byte	0x7
 963 003d 29010000 		.4byte	.LASF3
 964 0041 02       		.uleb128 0x2
 965 0042 04       		.byte	0x4
 966 0043 05       		.byte	0x5
 967 0044 3C000000 		.4byte	.LASF4
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 23


 968 0048 02       		.uleb128 0x2
 969 0049 04       		.byte	0x4
 970 004a 07       		.byte	0x7
 971 004b 17010000 		.4byte	.LASF5
 972 004f 02       		.uleb128 0x2
 973 0050 08       		.byte	0x8
 974 0051 05       		.byte	0x5
 975 0052 DC010000 		.4byte	.LASF6
 976 0056 02       		.uleb128 0x2
 977 0057 08       		.byte	0x8
 978 0058 07       		.byte	0x7
 979 0059 A7010000 		.4byte	.LASF7
 980 005d 03       		.uleb128 0x3
 981 005e 04       		.byte	0x4
 982 005f 05       		.byte	0x5
 983 0060 696E7400 		.ascii	"int\000"
 984 0064 02       		.uleb128 0x2
 985 0065 04       		.byte	0x4
 986 0066 07       		.byte	0x7
 987 0067 9A010000 		.4byte	.LASF8
 988 006b 04       		.uleb128 0x4
 989 006c 65000000 		.4byte	.LASF9
 990 0070 02       		.byte	0x2
 991 0071 B3       		.byte	0xb3
 992 0072 2C000000 		.4byte	0x2c
 993 0076 04       		.uleb128 0x4
 994 0077 74010000 		.4byte	.LASF10
 995 007b 02       		.byte	0x2
 996 007c B4       		.byte	0xb4
 997 007d 3A000000 		.4byte	0x3a
 998 0081 02       		.uleb128 0x2
 999 0082 04       		.byte	0x4
 1000 0083 04       		.byte	0x4
 1001 0084 83000000 		.4byte	.LASF11
 1002 0088 02       		.uleb128 0x2
 1003 0089 08       		.byte	0x8
 1004 008a 04       		.byte	0x4
 1005 008b 6D010000 		.4byte	.LASF12
 1006 008f 02       		.uleb128 0x2
 1007 0090 01       		.byte	0x1
 1008 0091 08       		.byte	0x8
 1009 0092 EA010000 		.4byte	.LASF13
 1010 0096 02       		.uleb128 0x2
 1011 0097 04       		.byte	0x4
 1012 0098 07       		.byte	0x7
 1013 0099 CA010000 		.4byte	.LASF14
 1014 009d 05       		.uleb128 0x5
 1015 009e 01       		.byte	0x1
 1016 009f 03       		.byte	0x3
 1017 00a0 19       		.byte	0x19
 1018 00a1 C4000000 		.4byte	0xc4
 1019 00a5 06       		.uleb128 0x6
 1020 00a6 8E000000 		.4byte	.LASF15
 1021 00aa 00       		.sleb128 0
 1022 00ab 06       		.uleb128 0x6
 1023 00ac 18000000 		.4byte	.LASF16
 1024 00b0 01       		.sleb128 1
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 24


 1025 00b1 06       		.uleb128 0x6
 1026 00b2 78000000 		.4byte	.LASF17
 1027 00b6 02       		.sleb128 2
 1028 00b7 06       		.uleb128 0x6
 1029 00b8 00000000 		.4byte	.LASF18
 1030 00bc 03       		.sleb128 3
 1031 00bd 06       		.uleb128 0x6
 1032 00be 7B010000 		.4byte	.LASF19
 1033 00c2 04       		.sleb128 4
 1034 00c3 00       		.byte	0
 1035 00c4 04       		.uleb128 0x4
 1036 00c5 D3010000 		.4byte	.LASF20
 1037 00c9 03       		.byte	0x3
 1038 00ca 19       		.byte	0x19
 1039 00cb 9D000000 		.4byte	0x9d
 1040 00cf 05       		.uleb128 0x5
 1041 00d0 01       		.byte	0x1
 1042 00d1 03       		.byte	0x3
 1043 00d2 1A       		.byte	0x1a
 1044 00d3 E4000000 		.4byte	0xe4
 1045 00d7 06       		.uleb128 0x6
 1046 00d8 96020000 		.4byte	.LASF21
 1047 00dc 00       		.sleb128 0
 1048 00dd 06       		.uleb128 0x6
 1049 00de 9C020000 		.4byte	.LASF22
 1050 00e2 01       		.sleb128 1
 1051 00e3 00       		.byte	0
 1052 00e4 04       		.uleb128 0x4
 1053 00e5 50000000 		.4byte	.LASF23
 1054 00e9 03       		.byte	0x3
 1055 00ea 1A       		.byte	0x1a
 1056 00eb CF000000 		.4byte	0xcf
 1057 00ef 07       		.uleb128 0x7
 1058 00f0 64020000 		.4byte	.LASF53
 1059 00f4 0C       		.byte	0xc
 1060 00f5 01       		.byte	0x1
 1061 00f6 17       		.byte	0x17
 1062 00f7 20010000 		.4byte	0x120
 1063 00fb 08       		.uleb128 0x8
 1064 00fc C3010000 		.4byte	.LASF24
 1065 0100 01       		.byte	0x1
 1066 0101 18       		.byte	0x18
 1067 0102 76000000 		.4byte	0x76
 1068 0106 00       		.byte	0
 1069 0107 08       		.uleb128 0x8
 1070 0108 21000000 		.4byte	.LASF25
 1071 010c 01       		.byte	0x1
 1072 010d 19       		.byte	0x19
 1073 010e 20010000 		.4byte	0x120
 1074 0112 04       		.byte	0x4
 1075 0113 08       		.uleb128 0x8
 1076 0114 A8020000 		.4byte	.LASF26
 1077 0118 01       		.byte	0x1
 1078 0119 1A       		.byte	0x1a
 1079 011a 20010000 		.4byte	0x120
 1080 011e 08       		.byte	0x8
 1081 011f 00       		.byte	0
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 25


 1082 0120 09       		.uleb128 0x9
 1083 0121 04       		.byte	0x4
 1084 0122 EF000000 		.4byte	0xef
 1085 0126 04       		.uleb128 0x4
 1086 0127 35000000 		.4byte	.LASF27
 1087 012b 01       		.byte	0x1
 1088 012c 1B       		.byte	0x1b
 1089 012d EF000000 		.4byte	0xef
 1090 0131 0A       		.uleb128 0xa
 1091 0132 76020000 		.4byte	.LASF30
 1092 0136 01       		.byte	0x1
 1093 0137 25       		.byte	0x25
 1094 0138 00000000 		.4byte	.LFB34
 1095 013c 90010000 		.4byte	.LFE34-.LFB34
 1096 0140 01       		.uleb128 0x1
 1097 0141 9C       		.byte	0x9c
 1098 0142 66010000 		.4byte	0x166
 1099 0146 0B       		.uleb128 0xb
 1100 0147 04020000 		.4byte	.LASF28
 1101 014b 01       		.byte	0x1
 1102 014c 26       		.byte	0x26
 1103 014d 5D000000 		.4byte	0x5d
 1104 0151 05       		.uleb128 0x5
 1105 0152 03       		.byte	0x3
 1106 0153 0C000000 		.4byte	freq.6452
 1107 0157 0B       		.uleb128 0xb
 1108 0158 89000000 		.4byte	.LASF29
 1109 015c 01       		.byte	0x1
 1110 015d 27       		.byte	0x27
 1111 015e 8F000000 		.4byte	0x8f
 1112 0162 02       		.uleb128 0x2
 1113 0163 91       		.byte	0x91
 1114 0164 6F       		.sleb128 -17
 1115 0165 00       		.byte	0
 1116 0166 0C       		.uleb128 0xc
 1117 0167 95010000 		.4byte	.LASF41
 1118 016b 01       		.byte	0x1
 1119 016c 61       		.byte	0x61
 1120 016d 5D000000 		.4byte	0x5d
 1121 0171 00000000 		.4byte	.LFB35
 1122 0175 4C000000 		.4byte	.LFE35-.LFB35
 1123 0179 01       		.uleb128 0x1
 1124 017a 9C       		.byte	0x9c
 1125 017b 0A       		.uleb128 0xa
 1126 017c 89020000 		.4byte	.LASF31
 1127 0180 01       		.byte	0x1
 1128 0181 78       		.byte	0x78
 1129 0182 00000000 		.4byte	.LFB36
 1130 0186 36000000 		.4byte	.LFE36-.LFB36
 1131 018a 01       		.uleb128 0x1
 1132 018b 9C       		.byte	0x9c
 1133 018c AD010000 		.4byte	0x1ad
 1134 0190 0D       		.uleb128 0xd
 1135 0191 FB010000 		.4byte	.LASF34
 1136 0195 01       		.byte	0x1
 1137 0196 78       		.byte	0x78
 1138 0197 5D000000 		.4byte	0x5d
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 26


 1139 019b 02       		.uleb128 0x2
 1140 019c 91       		.byte	0x91
 1141 019d 6C       		.sleb128 -20
 1142 019e 0E       		.uleb128 0xe
 1143 019f 76616C00 		.ascii	"val\000"
 1144 01a3 01       		.byte	0x1
 1145 01a4 79       		.byte	0x79
 1146 01a5 6B000000 		.4byte	0x6b
 1147 01a9 02       		.uleb128 0x2
 1148 01aa 91       		.byte	0x91
 1149 01ab 77       		.sleb128 -9
 1150 01ac 00       		.byte	0
 1151 01ad 0A       		.uleb128 0xa
 1152 01ae EF010000 		.4byte	.LASF32
 1153 01b2 01       		.byte	0x1
 1154 01b3 88       		.byte	0x88
 1155 01b4 00000000 		.4byte	.LFB37
 1156 01b8 44000000 		.4byte	.LFE37-.LFB37
 1157 01bc 01       		.uleb128 0x1
 1158 01bd 9C       		.byte	0x9c
 1159 01be D1010000 		.4byte	0x1d1
 1160 01c2 0B       		.uleb128 0xb
 1161 01c3 89000000 		.4byte	.LASF29
 1162 01c7 01       		.byte	0x1
 1163 01c8 89       		.byte	0x89
 1164 01c9 6B000000 		.4byte	0x6b
 1165 01cd 02       		.uleb128 0x2
 1166 01ce 91       		.byte	0x91
 1167 01cf 6F       		.sleb128 -17
 1168 01d0 00       		.byte	0
 1169 01d1 0A       		.uleb128 0xa
 1170 01d2 57020000 		.4byte	.LASF33
 1171 01d6 01       		.byte	0x1
 1172 01d7 9B       		.byte	0x9b
 1173 01d8 00000000 		.4byte	.LFB38
 1174 01dc 8C000000 		.4byte	.LFE38-.LFB38
 1175 01e0 01       		.uleb128 0x1
 1176 01e1 9C       		.byte	0x9c
 1177 01e2 01020000 		.4byte	0x201
 1178 01e6 0E       		.uleb128 0xe
 1179 01e7 6900     		.ascii	"i\000"
 1180 01e9 01       		.byte	0x1
 1181 01ea 9C       		.byte	0x9c
 1182 01eb 5D000000 		.4byte	0x5d
 1183 01ef 02       		.uleb128 0x2
 1184 01f0 91       		.byte	0x91
 1185 01f1 74       		.sleb128 -12
 1186 01f2 0E       		.uleb128 0xe
 1187 01f3 746D7000 		.ascii	"tmp\000"
 1188 01f7 01       		.byte	0x1
 1189 01f8 9D       		.byte	0x9d
 1190 01f9 01020000 		.4byte	0x201
 1191 01fd 02       		.uleb128 0x2
 1192 01fe 91       		.byte	0x91
 1193 01ff 70       		.sleb128 -16
 1194 0200 00       		.byte	0
 1195 0201 09       		.uleb128 0x9
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 27


 1196 0202 04       		.byte	0x4
 1197 0203 26010000 		.4byte	0x126
 1198 0207 0F       		.uleb128 0xf
 1199 0208 2B000000 		.4byte	.LASF37
 1200 020c 01       		.byte	0x1
 1201 020d B5       		.byte	0xb5
 1202 020e 4B020000 		.4byte	0x24b
 1203 0212 00000000 		.4byte	.LFB39
 1204 0216 8C000000 		.4byte	.LFE39-.LFB39
 1205 021a 01       		.uleb128 0x1
 1206 021b 9C       		.byte	0x9c
 1207 021c 4B020000 		.4byte	0x24b
 1208 0220 0D       		.uleb128 0xd
 1209 0221 FB010000 		.4byte	.LASF34
 1210 0225 01       		.byte	0x1
 1211 0226 B5       		.byte	0xb5
 1212 0227 5D000000 		.4byte	0x5d
 1213 022b 02       		.uleb128 0x2
 1214 022c 91       		.byte	0x91
 1215 022d 6C       		.sleb128 -20
 1216 022e 0E       		.uleb128 0xe
 1217 022f 746D7000 		.ascii	"tmp\000"
 1218 0233 01       		.byte	0x1
 1219 0234 B6       		.byte	0xb6
 1220 0235 01020000 		.4byte	0x201
 1221 0239 02       		.uleb128 0x2
 1222 023a 91       		.byte	0x91
 1223 023b 74       		.sleb128 -12
 1224 023c 0B       		.uleb128 0xb
 1225 023d 0F010000 		.4byte	.LASF35
 1226 0241 01       		.byte	0x1
 1227 0242 B6       		.byte	0xb6
 1228 0243 01020000 		.4byte	0x201
 1229 0247 02       		.uleb128 0x2
 1230 0248 91       		.byte	0x91
 1231 0249 70       		.sleb128 -16
 1232 024a 00       		.byte	0
 1233 024b 02       		.uleb128 0x2
 1234 024c 01       		.byte	0x1
 1235 024d 02       		.byte	0x2
 1236 024e A2020000 		.4byte	.LASF36
 1237 0252 0F       		.uleb128 0xf
 1238 0253 60010000 		.4byte	.LASF38
 1239 0257 01       		.byte	0x1
 1240 0258 D5       		.byte	0xd5
 1241 0259 4B020000 		.4byte	0x24b
 1242 025d 00000000 		.4byte	.LFB40
 1243 0261 70000000 		.4byte	.LFE40-.LFB40
 1244 0265 01       		.uleb128 0x1
 1245 0266 9C       		.byte	0x9c
 1246 0267 88020000 		.4byte	0x288
 1247 026b 0D       		.uleb128 0xd
 1248 026c FB010000 		.4byte	.LASF34
 1249 0270 01       		.byte	0x1
 1250 0271 D5       		.byte	0xd5
 1251 0272 5D000000 		.4byte	0x5d
 1252 0276 02       		.uleb128 0x2
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 28


 1253 0277 91       		.byte	0x91
 1254 0278 6C       		.sleb128 -20
 1255 0279 0E       		.uleb128 0xe
 1256 027a 746D7000 		.ascii	"tmp\000"
 1257 027e 01       		.byte	0x1
 1258 027f D6       		.byte	0xd6
 1259 0280 01020000 		.4byte	0x201
 1260 0284 02       		.uleb128 0x2
 1261 0285 91       		.byte	0x91
 1262 0286 74       		.sleb128 -12
 1263 0287 00       		.byte	0
 1264 0288 10       		.uleb128 0x10
 1265 0289 09000000 		.4byte	.LASF39
 1266 028d 01       		.byte	0x1
 1267 028e F2       		.byte	0xf2
 1268 028f 4B020000 		.4byte	0x24b
 1269 0293 00000000 		.4byte	.LFB41
 1270 0297 3C000000 		.4byte	.LFE41-.LFB41
 1271 029b 01       		.uleb128 0x1
 1272 029c 9C       		.byte	0x9c
 1273 029d BE020000 		.4byte	0x2be
 1274 02a1 0D       		.uleb128 0xd
 1275 02a2 69020000 		.4byte	.LASF40
 1276 02a6 01       		.byte	0x1
 1277 02a7 F2       		.byte	0xf2
 1278 02a8 5D000000 		.4byte	0x5d
 1279 02ac 02       		.uleb128 0x2
 1280 02ad 91       		.byte	0x91
 1281 02ae 6C       		.sleb128 -20
 1282 02af 0E       		.uleb128 0xe
 1283 02b0 746D7000 		.ascii	"tmp\000"
 1284 02b4 01       		.byte	0x1
 1285 02b5 F3       		.byte	0xf3
 1286 02b6 01020000 		.4byte	0x201
 1287 02ba 02       		.uleb128 0x2
 1288 02bb 91       		.byte	0x91
 1289 02bc 74       		.sleb128 -12
 1290 02bd 00       		.byte	0
 1291 02be 11       		.uleb128 0x11
 1292 02bf 3C010000 		.4byte	.LASF42
 1293 02c3 01       		.byte	0x1
 1294 02c4 0601     		.2byte	0x106
 1295 02c6 00000000 		.4byte	.LFB42
 1296 02ca 40000000 		.4byte	.LFE42-.LFB42
 1297 02ce 01       		.uleb128 0x1
 1298 02cf 9C       		.byte	0x9c
 1299 02d0 12       		.uleb128 0x12
 1300 02d1 45000000 		.4byte	.LASF43
 1301 02d5 01       		.byte	0x1
 1302 02d6 13       		.byte	0x13
 1303 02d7 5D000000 		.4byte	0x5d
 1304 02db 05       		.uleb128 0x5
 1305 02dc 03       		.byte	0x3
 1306 02dd 00000000 		.4byte	switchFreq
 1307 02e1 12       		.uleb128 0x12
 1308 02e2 72000000 		.4byte	.LASF44
 1309 02e6 01       		.byte	0x1
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 29


 1310 02e7 14       		.byte	0x14
 1311 02e8 4B020000 		.4byte	0x24b
 1312 02ec 05       		.uleb128 0x5
 1313 02ed 03       		.byte	0x3
 1314 02ee 00000000 		.4byte	power
 1315 02f2 12       		.uleb128 0x12
 1316 02f3 6B000000 		.4byte	.LASF45
 1317 02f7 01       		.byte	0x1
 1318 02f8 20       		.byte	0x20
 1319 02f9 C4000000 		.4byte	0xc4
 1320 02fd 05       		.uleb128 0x5
 1321 02fe 03       		.byte	0x3
 1322 02ff 00000000 		.4byte	status
 1323 0303 12       		.uleb128 0x12
 1324 0304 5B000000 		.4byte	.LASF46
 1325 0308 01       		.byte	0x1
 1326 0309 15       		.byte	0x15
 1327 030a 5D000000 		.4byte	0x5d
 1328 030e 05       		.uleb128 0x5
 1329 030f 03       		.byte	0x3
 1330 0310 00000000 		.4byte	calibrate
 1331 0314 12       		.uleb128 0x12
 1332 0315 90010000 		.4byte	.LASF47
 1333 0319 01       		.byte	0x1
 1334 031a 1C       		.byte	0x1c
 1335 031b 01020000 		.4byte	0x201
 1336 031f 05       		.uleb128 0x5
 1337 0320 03       		.byte	0x3
 1338 0321 00000000 		.4byte	head
 1339 0325 12       		.uleb128 0x12
 1340 0326 26000000 		.4byte	.LASF48
 1341 032a 01       		.byte	0x1
 1342 032b 1D       		.byte	0x1d
 1343 032c 01020000 		.4byte	0x201
 1344 0330 05       		.uleb128 0x5
 1345 0331 03       		.byte	0x3
 1346 0332 00000000 		.4byte	curr
 1347 0336 12       		.uleb128 0x12
 1348 0337 BE010000 		.4byte	.LASF49
 1349 033b 01       		.byte	0x1
 1350 033c 21       		.byte	0x21
 1351 033d E4000000 		.4byte	0xe4
 1352 0341 05       		.uleb128 0x5
 1353 0342 03       		.byte	0x3
 1354 0343 00000000 		.4byte	mode
 1355 0347 00       		.byte	0
 1356              		.section	.debug_abbrev,"",%progbits
 1357              	.Ldebug_abbrev0:
 1358 0000 01       		.uleb128 0x1
 1359 0001 11       		.uleb128 0x11
 1360 0002 01       		.byte	0x1
 1361 0003 25       		.uleb128 0x25
 1362 0004 0E       		.uleb128 0xe
 1363 0005 13       		.uleb128 0x13
 1364 0006 0B       		.uleb128 0xb
 1365 0007 03       		.uleb128 0x3
 1366 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 30


 1367 0009 1B       		.uleb128 0x1b
 1368 000a 0E       		.uleb128 0xe
 1369 000b 55       		.uleb128 0x55
 1370 000c 17       		.uleb128 0x17
 1371 000d 11       		.uleb128 0x11
 1372 000e 01       		.uleb128 0x1
 1373 000f 10       		.uleb128 0x10
 1374 0010 17       		.uleb128 0x17
 1375 0011 00       		.byte	0
 1376 0012 00       		.byte	0
 1377 0013 02       		.uleb128 0x2
 1378 0014 24       		.uleb128 0x24
 1379 0015 00       		.byte	0
 1380 0016 0B       		.uleb128 0xb
 1381 0017 0B       		.uleb128 0xb
 1382 0018 3E       		.uleb128 0x3e
 1383 0019 0B       		.uleb128 0xb
 1384 001a 03       		.uleb128 0x3
 1385 001b 0E       		.uleb128 0xe
 1386 001c 00       		.byte	0
 1387 001d 00       		.byte	0
 1388 001e 03       		.uleb128 0x3
 1389 001f 24       		.uleb128 0x24
 1390 0020 00       		.byte	0
 1391 0021 0B       		.uleb128 0xb
 1392 0022 0B       		.uleb128 0xb
 1393 0023 3E       		.uleb128 0x3e
 1394 0024 0B       		.uleb128 0xb
 1395 0025 03       		.uleb128 0x3
 1396 0026 08       		.uleb128 0x8
 1397 0027 00       		.byte	0
 1398 0028 00       		.byte	0
 1399 0029 04       		.uleb128 0x4
 1400 002a 16       		.uleb128 0x16
 1401 002b 00       		.byte	0
 1402 002c 03       		.uleb128 0x3
 1403 002d 0E       		.uleb128 0xe
 1404 002e 3A       		.uleb128 0x3a
 1405 002f 0B       		.uleb128 0xb
 1406 0030 3B       		.uleb128 0x3b
 1407 0031 0B       		.uleb128 0xb
 1408 0032 49       		.uleb128 0x49
 1409 0033 13       		.uleb128 0x13
 1410 0034 00       		.byte	0
 1411 0035 00       		.byte	0
 1412 0036 05       		.uleb128 0x5
 1413 0037 04       		.uleb128 0x4
 1414 0038 01       		.byte	0x1
 1415 0039 0B       		.uleb128 0xb
 1416 003a 0B       		.uleb128 0xb
 1417 003b 3A       		.uleb128 0x3a
 1418 003c 0B       		.uleb128 0xb
 1419 003d 3B       		.uleb128 0x3b
 1420 003e 0B       		.uleb128 0xb
 1421 003f 01       		.uleb128 0x1
 1422 0040 13       		.uleb128 0x13
 1423 0041 00       		.byte	0
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 31


 1424 0042 00       		.byte	0
 1425 0043 06       		.uleb128 0x6
 1426 0044 28       		.uleb128 0x28
 1427 0045 00       		.byte	0
 1428 0046 03       		.uleb128 0x3
 1429 0047 0E       		.uleb128 0xe
 1430 0048 1C       		.uleb128 0x1c
 1431 0049 0D       		.uleb128 0xd
 1432 004a 00       		.byte	0
 1433 004b 00       		.byte	0
 1434 004c 07       		.uleb128 0x7
 1435 004d 13       		.uleb128 0x13
 1436 004e 01       		.byte	0x1
 1437 004f 03       		.uleb128 0x3
 1438 0050 0E       		.uleb128 0xe
 1439 0051 0B       		.uleb128 0xb
 1440 0052 0B       		.uleb128 0xb
 1441 0053 3A       		.uleb128 0x3a
 1442 0054 0B       		.uleb128 0xb
 1443 0055 3B       		.uleb128 0x3b
 1444 0056 0B       		.uleb128 0xb
 1445 0057 01       		.uleb128 0x1
 1446 0058 13       		.uleb128 0x13
 1447 0059 00       		.byte	0
 1448 005a 00       		.byte	0
 1449 005b 08       		.uleb128 0x8
 1450 005c 0D       		.uleb128 0xd
 1451 005d 00       		.byte	0
 1452 005e 03       		.uleb128 0x3
 1453 005f 0E       		.uleb128 0xe
 1454 0060 3A       		.uleb128 0x3a
 1455 0061 0B       		.uleb128 0xb
 1456 0062 3B       		.uleb128 0x3b
 1457 0063 0B       		.uleb128 0xb
 1458 0064 49       		.uleb128 0x49
 1459 0065 13       		.uleb128 0x13
 1460 0066 38       		.uleb128 0x38
 1461 0067 0B       		.uleb128 0xb
 1462 0068 00       		.byte	0
 1463 0069 00       		.byte	0
 1464 006a 09       		.uleb128 0x9
 1465 006b 0F       		.uleb128 0xf
 1466 006c 00       		.byte	0
 1467 006d 0B       		.uleb128 0xb
 1468 006e 0B       		.uleb128 0xb
 1469 006f 49       		.uleb128 0x49
 1470 0070 13       		.uleb128 0x13
 1471 0071 00       		.byte	0
 1472 0072 00       		.byte	0
 1473 0073 0A       		.uleb128 0xa
 1474 0074 2E       		.uleb128 0x2e
 1475 0075 01       		.byte	0x1
 1476 0076 3F       		.uleb128 0x3f
 1477 0077 19       		.uleb128 0x19
 1478 0078 03       		.uleb128 0x3
 1479 0079 0E       		.uleb128 0xe
 1480 007a 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 32


 1481 007b 0B       		.uleb128 0xb
 1482 007c 3B       		.uleb128 0x3b
 1483 007d 0B       		.uleb128 0xb
 1484 007e 27       		.uleb128 0x27
 1485 007f 19       		.uleb128 0x19
 1486 0080 11       		.uleb128 0x11
 1487 0081 01       		.uleb128 0x1
 1488 0082 12       		.uleb128 0x12
 1489 0083 06       		.uleb128 0x6
 1490 0084 40       		.uleb128 0x40
 1491 0085 18       		.uleb128 0x18
 1492 0086 9642     		.uleb128 0x2116
 1493 0088 19       		.uleb128 0x19
 1494 0089 01       		.uleb128 0x1
 1495 008a 13       		.uleb128 0x13
 1496 008b 00       		.byte	0
 1497 008c 00       		.byte	0
 1498 008d 0B       		.uleb128 0xb
 1499 008e 34       		.uleb128 0x34
 1500 008f 00       		.byte	0
 1501 0090 03       		.uleb128 0x3
 1502 0091 0E       		.uleb128 0xe
 1503 0092 3A       		.uleb128 0x3a
 1504 0093 0B       		.uleb128 0xb
 1505 0094 3B       		.uleb128 0x3b
 1506 0095 0B       		.uleb128 0xb
 1507 0096 49       		.uleb128 0x49
 1508 0097 13       		.uleb128 0x13
 1509 0098 02       		.uleb128 0x2
 1510 0099 18       		.uleb128 0x18
 1511 009a 00       		.byte	0
 1512 009b 00       		.byte	0
 1513 009c 0C       		.uleb128 0xc
 1514 009d 2E       		.uleb128 0x2e
 1515 009e 00       		.byte	0
 1516 009f 3F       		.uleb128 0x3f
 1517 00a0 19       		.uleb128 0x19
 1518 00a1 03       		.uleb128 0x3
 1519 00a2 0E       		.uleb128 0xe
 1520 00a3 3A       		.uleb128 0x3a
 1521 00a4 0B       		.uleb128 0xb
 1522 00a5 3B       		.uleb128 0x3b
 1523 00a6 0B       		.uleb128 0xb
 1524 00a7 49       		.uleb128 0x49
 1525 00a8 13       		.uleb128 0x13
 1526 00a9 11       		.uleb128 0x11
 1527 00aa 01       		.uleb128 0x1
 1528 00ab 12       		.uleb128 0x12
 1529 00ac 06       		.uleb128 0x6
 1530 00ad 40       		.uleb128 0x40
 1531 00ae 18       		.uleb128 0x18
 1532 00af 9642     		.uleb128 0x2116
 1533 00b1 19       		.uleb128 0x19
 1534 00b2 00       		.byte	0
 1535 00b3 00       		.byte	0
 1536 00b4 0D       		.uleb128 0xd
 1537 00b5 05       		.uleb128 0x5
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 33


 1538 00b6 00       		.byte	0
 1539 00b7 03       		.uleb128 0x3
 1540 00b8 0E       		.uleb128 0xe
 1541 00b9 3A       		.uleb128 0x3a
 1542 00ba 0B       		.uleb128 0xb
 1543 00bb 3B       		.uleb128 0x3b
 1544 00bc 0B       		.uleb128 0xb
 1545 00bd 49       		.uleb128 0x49
 1546 00be 13       		.uleb128 0x13
 1547 00bf 02       		.uleb128 0x2
 1548 00c0 18       		.uleb128 0x18
 1549 00c1 00       		.byte	0
 1550 00c2 00       		.byte	0
 1551 00c3 0E       		.uleb128 0xe
 1552 00c4 34       		.uleb128 0x34
 1553 00c5 00       		.byte	0
 1554 00c6 03       		.uleb128 0x3
 1555 00c7 08       		.uleb128 0x8
 1556 00c8 3A       		.uleb128 0x3a
 1557 00c9 0B       		.uleb128 0xb
 1558 00ca 3B       		.uleb128 0x3b
 1559 00cb 0B       		.uleb128 0xb
 1560 00cc 49       		.uleb128 0x49
 1561 00cd 13       		.uleb128 0x13
 1562 00ce 02       		.uleb128 0x2
 1563 00cf 18       		.uleb128 0x18
 1564 00d0 00       		.byte	0
 1565 00d1 00       		.byte	0
 1566 00d2 0F       		.uleb128 0xf
 1567 00d3 2E       		.uleb128 0x2e
 1568 00d4 01       		.byte	0x1
 1569 00d5 3F       		.uleb128 0x3f
 1570 00d6 19       		.uleb128 0x19
 1571 00d7 03       		.uleb128 0x3
 1572 00d8 0E       		.uleb128 0xe
 1573 00d9 3A       		.uleb128 0x3a
 1574 00da 0B       		.uleb128 0xb
 1575 00db 3B       		.uleb128 0x3b
 1576 00dc 0B       		.uleb128 0xb
 1577 00dd 27       		.uleb128 0x27
 1578 00de 19       		.uleb128 0x19
 1579 00df 49       		.uleb128 0x49
 1580 00e0 13       		.uleb128 0x13
 1581 00e1 11       		.uleb128 0x11
 1582 00e2 01       		.uleb128 0x1
 1583 00e3 12       		.uleb128 0x12
 1584 00e4 06       		.uleb128 0x6
 1585 00e5 40       		.uleb128 0x40
 1586 00e6 18       		.uleb128 0x18
 1587 00e7 9642     		.uleb128 0x2116
 1588 00e9 19       		.uleb128 0x19
 1589 00ea 01       		.uleb128 0x1
 1590 00eb 13       		.uleb128 0x13
 1591 00ec 00       		.byte	0
 1592 00ed 00       		.byte	0
 1593 00ee 10       		.uleb128 0x10
 1594 00ef 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 34


 1595 00f0 01       		.byte	0x1
 1596 00f1 3F       		.uleb128 0x3f
 1597 00f2 19       		.uleb128 0x19
 1598 00f3 03       		.uleb128 0x3
 1599 00f4 0E       		.uleb128 0xe
 1600 00f5 3A       		.uleb128 0x3a
 1601 00f6 0B       		.uleb128 0xb
 1602 00f7 3B       		.uleb128 0x3b
 1603 00f8 0B       		.uleb128 0xb
 1604 00f9 27       		.uleb128 0x27
 1605 00fa 19       		.uleb128 0x19
 1606 00fb 49       		.uleb128 0x49
 1607 00fc 13       		.uleb128 0x13
 1608 00fd 11       		.uleb128 0x11
 1609 00fe 01       		.uleb128 0x1
 1610 00ff 12       		.uleb128 0x12
 1611 0100 06       		.uleb128 0x6
 1612 0101 40       		.uleb128 0x40
 1613 0102 18       		.uleb128 0x18
 1614 0103 9742     		.uleb128 0x2117
 1615 0105 19       		.uleb128 0x19
 1616 0106 01       		.uleb128 0x1
 1617 0107 13       		.uleb128 0x13
 1618 0108 00       		.byte	0
 1619 0109 00       		.byte	0
 1620 010a 11       		.uleb128 0x11
 1621 010b 2E       		.uleb128 0x2e
 1622 010c 00       		.byte	0
 1623 010d 3F       		.uleb128 0x3f
 1624 010e 19       		.uleb128 0x19
 1625 010f 03       		.uleb128 0x3
 1626 0110 0E       		.uleb128 0xe
 1627 0111 3A       		.uleb128 0x3a
 1628 0112 0B       		.uleb128 0xb
 1629 0113 3B       		.uleb128 0x3b
 1630 0114 05       		.uleb128 0x5
 1631 0115 27       		.uleb128 0x27
 1632 0116 19       		.uleb128 0x19
 1633 0117 11       		.uleb128 0x11
 1634 0118 01       		.uleb128 0x1
 1635 0119 12       		.uleb128 0x12
 1636 011a 06       		.uleb128 0x6
 1637 011b 40       		.uleb128 0x40
 1638 011c 18       		.uleb128 0x18
 1639 011d 9642     		.uleb128 0x2116
 1640 011f 19       		.uleb128 0x19
 1641 0120 00       		.byte	0
 1642 0121 00       		.byte	0
 1643 0122 12       		.uleb128 0x12
 1644 0123 34       		.uleb128 0x34
 1645 0124 00       		.byte	0
 1646 0125 03       		.uleb128 0x3
 1647 0126 0E       		.uleb128 0xe
 1648 0127 3A       		.uleb128 0x3a
 1649 0128 0B       		.uleb128 0xb
 1650 0129 3B       		.uleb128 0x3b
 1651 012a 0B       		.uleb128 0xb
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 35


 1652 012b 49       		.uleb128 0x49
 1653 012c 13       		.uleb128 0x13
 1654 012d 3F       		.uleb128 0x3f
 1655 012e 19       		.uleb128 0x19
 1656 012f 02       		.uleb128 0x2
 1657 0130 18       		.uleb128 0x18
 1658 0131 00       		.byte	0
 1659 0132 00       		.byte	0
 1660 0133 00       		.byte	0
 1661              		.section	.debug_aranges,"",%progbits
 1662 0000 5C000000 		.4byte	0x5c
 1663 0004 0200     		.2byte	0x2
 1664 0006 00000000 		.4byte	.Ldebug_info0
 1665 000a 04       		.byte	0x4
 1666 000b 00       		.byte	0
 1667 000c 0000     		.2byte	0
 1668 000e 0000     		.2byte	0
 1669 0010 00000000 		.4byte	.LFB34
 1670 0014 90010000 		.4byte	.LFE34-.LFB34
 1671 0018 00000000 		.4byte	.LFB35
 1672 001c 4C000000 		.4byte	.LFE35-.LFB35
 1673 0020 00000000 		.4byte	.LFB36
 1674 0024 36000000 		.4byte	.LFE36-.LFB36
 1675 0028 00000000 		.4byte	.LFB37
 1676 002c 44000000 		.4byte	.LFE37-.LFB37
 1677 0030 00000000 		.4byte	.LFB38
 1678 0034 8C000000 		.4byte	.LFE38-.LFB38
 1679 0038 00000000 		.4byte	.LFB39
 1680 003c 8C000000 		.4byte	.LFE39-.LFB39
 1681 0040 00000000 		.4byte	.LFB40
 1682 0044 70000000 		.4byte	.LFE40-.LFB40
 1683 0048 00000000 		.4byte	.LFB41
 1684 004c 3C000000 		.4byte	.LFE41-.LFB41
 1685 0050 00000000 		.4byte	.LFB42
 1686 0054 40000000 		.4byte	.LFE42-.LFB42
 1687 0058 00000000 		.4byte	0
 1688 005c 00000000 		.4byte	0
 1689              		.section	.debug_ranges,"",%progbits
 1690              	.Ldebug_ranges0:
 1691 0000 00000000 		.4byte	.LFB34
 1692 0004 90010000 		.4byte	.LFE34
 1693 0008 00000000 		.4byte	.LFB35
 1694 000c 4C000000 		.4byte	.LFE35
 1695 0010 00000000 		.4byte	.LFB36
 1696 0014 36000000 		.4byte	.LFE36
 1697 0018 00000000 		.4byte	.LFB37
 1698 001c 44000000 		.4byte	.LFE37
 1699 0020 00000000 		.4byte	.LFB38
 1700 0024 8C000000 		.4byte	.LFE38
 1701 0028 00000000 		.4byte	.LFB39
 1702 002c 8C000000 		.4byte	.LFE39
 1703 0030 00000000 		.4byte	.LFB40
 1704 0034 70000000 		.4byte	.LFE40
 1705 0038 00000000 		.4byte	.LFB41
 1706 003c 3C000000 		.4byte	.LFE41
 1707 0040 00000000 		.4byte	.LFB42
 1708 0044 40000000 		.4byte	.LFE42
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 36


 1709 0048 00000000 		.4byte	0
 1710 004c 00000000 		.4byte	0
 1711              		.section	.debug_line,"",%progbits
 1712              	.Ldebug_line0:
 1713 0000 A4010000 		.section	.debug_str,"MS",%progbits,1
 1713      02004F00 
 1713      00000201 
 1713      FB0E0D00 
 1713      01010101 
 1714              	.LASF18:
 1715 0000 51554553 		.ascii	"QUESTION\000"
 1715      54494F4E 
 1715      00
 1716              	.LASF39:
 1717 0009 69735377 		.ascii	"isSwitchActive\000"
 1717      69746368 
 1717      41637469 
 1717      766500
 1718              	.LASF16:
 1719 0018 5345545F 		.ascii	"SET_FREQ\000"
 1719      46524551 
 1719      00
 1720              	.LASF25:
 1721 0021 6E657874 		.ascii	"next\000"
 1721      00
 1722              	.LASF48:
 1723 0026 63757272 		.ascii	"curr\000"
 1723      00
 1724              	.LASF37:
 1725 002b 61646453 		.ascii	"addSwitch\000"
 1725      77697463 
 1725      6800
 1726              	.LASF27:
 1727 0035 6E6F6465 		.ascii	"node_t\000"
 1727      5F7400
 1728              	.LASF4:
 1729 003c 6C6F6E67 		.ascii	"long int\000"
 1729      20696E74 
 1729      00
 1730              	.LASF43:
 1731 0045 73776974 		.ascii	"switchFreq\000"
 1731      63684672 
 1731      657100
 1732              	.LASF23:
 1733 0050 63757272 		.ascii	"currMode_t\000"
 1733      4D6F6465 
 1733      5F7400
 1734              	.LASF46:
 1735 005b 63616C69 		.ascii	"calibrate\000"
 1735      62726174 
 1735      6500
 1736              	.LASF9:
 1737 0065 75696E74 		.ascii	"uint8\000"
 1737      3800
 1738              	.LASF45:
 1739 006b 73746174 		.ascii	"status\000"
 1739      757300
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 37


 1740              	.LASF44:
 1741 0072 706F7765 		.ascii	"power\000"
 1741      7200
 1742              	.LASF17:
 1743 0078 5345545F 		.ascii	"SET_SWITCH\000"
 1743      53574954 
 1743      434800
 1744              	.LASF11:
 1745 0083 666C6F61 		.ascii	"float\000"
 1745      7400
 1746              	.LASF29:
 1747 0089 64617461 		.ascii	"data\000"
 1747      00
 1748              	.LASF15:
 1749 008e 484F4D45 		.ascii	"HOME\000"
 1749      00
 1750              	.LASF50:
 1751 0093 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 1751      4320342E 
 1751      382E3420 
 1751      32303134 
 1751      30353236 
 1752 00c6 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 1752      20726576 
 1752      6973696F 
 1752      6E203231 
 1752      31333538 
 1753 00f9 30202D66 		.ascii	"0 -ffunction-sections\000"
 1753      66756E63 
 1753      74696F6E 
 1753      2D736563 
 1753      74696F6E 
 1754              	.LASF35:
 1755 010f 6E65774E 		.ascii	"newNode\000"
 1755      6F646500 
 1756              	.LASF5:
 1757 0117 6C6F6E67 		.ascii	"long unsigned int\000"
 1757      20756E73 
 1757      69676E65 
 1757      6420696E 
 1757      7400
 1758              	.LASF3:
 1759 0129 73686F72 		.ascii	"short unsigned int\000"
 1759      7420756E 
 1759      7369676E 
 1759      65642069 
 1759      6E7400
 1760              	.LASF42:
 1761 013c 696E6974 		.ascii	"initHardware\000"
 1761      48617264 
 1761      77617265 
 1761      00
 1762              	.LASF51:
 1763 0149 2E5C6D61 		.ascii	".\\main.c\000"
 1763      696E2E63 
 1763      00
 1764              	.LASF1:
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 38


 1765 0152 756E7369 		.ascii	"unsigned char\000"
 1765      676E6564 
 1765      20636861 
 1765      7200
 1766              	.LASF38:
 1767 0160 72656D6F 		.ascii	"removeSwitch\000"
 1767      76655377 
 1767      69746368 
 1767      00
 1768              	.LASF12:
 1769 016d 646F7562 		.ascii	"double\000"
 1769      6C6500
 1770              	.LASF10:
 1771 0174 75696E74 		.ascii	"uint16\000"
 1771      313600
 1772              	.LASF19:
 1773 017b 44454255 		.ascii	"DEBUG_MODE\000"
 1773      475F4D4F 
 1773      444500
 1774              	.LASF2:
 1775 0186 73686F72 		.ascii	"short int\000"
 1775      7420696E 
 1775      7400
 1776              	.LASF47:
 1777 0190 68656164 		.ascii	"head\000"
 1777      00
 1778              	.LASF41:
 1779 0195 6D61696E 		.ascii	"main\000"
 1779      00
 1780              	.LASF8:
 1781 019a 756E7369 		.ascii	"unsigned int\000"
 1781      676E6564 
 1781      20696E74 
 1781      00
 1782              	.LASF7:
 1783 01a7 6C6F6E67 		.ascii	"long long unsigned int\000"
 1783      206C6F6E 
 1783      6720756E 
 1783      7369676E 
 1783      65642069 
 1784              	.LASF49:
 1785 01be 6D6F6465 		.ascii	"mode\000"
 1785      00
 1786              	.LASF24:
 1787 01c3 6E756D62 		.ascii	"number\000"
 1787      657200
 1788              	.LASF14:
 1789 01ca 73697A65 		.ascii	"sizetype\000"
 1789      74797065 
 1789      00
 1790              	.LASF20:
 1791 01d3 73746174 		.ascii	"status_t\000"
 1791      75735F74 
 1791      00
 1792              	.LASF6:
 1793 01dc 6C6F6E67 		.ascii	"long long int\000"
 1793      206C6F6E 
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 39


 1793      6720696E 
 1793      7400
 1794              	.LASF13:
 1795 01ea 63686172 		.ascii	"char\000"
 1795      00
 1796              	.LASF32:
 1797 01ef 75706461 		.ascii	"updatePower\000"
 1797      7465506F 
 1797      77657200 
 1798              	.LASF34:
 1799 01fb 73776974 		.ascii	"switchNo\000"
 1799      63684E6F 
 1799      00
 1800              	.LASF28:
 1801 0204 66726571 		.ascii	"freq\000"
 1801      00
 1802              	.LASF52:
 1803 0209 433A5C55 		.ascii	"C:\\Users\\Matty\\Documents\\PSoC Creator\\RF_Switc"
 1803      73657273 
 1803      5C4D6174 
 1803      74795C44 
 1803      6F63756D 
 1804 0237 685F4D61 		.ascii	"h_Matrix\\RF_Switch_Matrix.cydsn\000"
 1804      74726978 
 1804      5C52465F 
 1804      53776974 
 1804      63685F4D 
 1805              	.LASF33:
 1806 0257 696E6974 		.ascii	"initSwitches\000"
 1806      53776974 
 1806      63686573 
 1806      00
 1807              	.LASF53:
 1808 0264 6E6F6465 		.ascii	"node\000"
 1808      00
 1809              	.LASF40:
 1810 0269 73776974 		.ascii	"switchNumber\000"
 1810      63684E75 
 1810      6D626572 
 1810      00
 1811              	.LASF30:
 1812 0276 72785F69 		.ascii	"rx_int\000"
 1812      6E7400
 1813              	.LASF0:
 1814 027d 7369676E 		.ascii	"signed char\000"
 1814      65642063 
 1814      68617200 
 1815              	.LASF31:
 1816 0289 75706461 		.ascii	"updateOutput\000"
 1816      74654F75 
 1816      74707574 
 1816      00
 1817              	.LASF21:
 1818 0296 4D4F4445 		.ascii	"MODEA\000"
 1818      4100
 1819              	.LASF22:
 1820 029c 4D4F4445 		.ascii	"MODEB\000"
ARM GAS  C:\Users\Matty\AppData\Local\Temp\ccc4Szzh.s 			page 40


 1820      4200
 1821              	.LASF36:
 1822 02a2 5F426F6F 		.ascii	"_Bool\000"
 1822      6C00
 1823              	.LASF26:
 1824 02a8 70726576 		.ascii	"prev\000"
 1824      00
 1825              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
